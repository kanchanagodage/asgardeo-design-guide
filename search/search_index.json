{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Asgardeo Design System"},{"location":"brand/","text":"Overview The brand reflects who we are and how we want our users to feel when they use our products.","title":"Overview"},{"location":"brand/#overview","text":"The brand reflects who we are and how we want our users to feel when they use our products.","title":"Overview"},{"location":"brand/mission/","text":"Mission To build a developer-focused IAM platform that is secure, simple, and stackable to help deliver better user experiences How do I apply our mission to my work?","title":"Mission"},{"location":"brand/mission/#mission","text":"To build a developer-focused IAM platform that is secure, simple, and stackable to help deliver better user experiences","title":"Mission"},{"location":"brand/mission/#how-do-i-apply-our-mission-to-my-work","text":"","title":"How do I apply our mission to my work?"},{"location":"brand/personality/","text":"Personality","title":"Personality"},{"location":"brand/personality/#personality","text":"","title":"Personality"},{"location":"brand/promise/","text":"Promise","title":"Promise"},{"location":"brand/promise/#promise","text":"","title":"Promise"},{"location":"brand/values/","text":"Values","title":"Values"},{"location":"brand/values/#values","text":"","title":"Values"},{"location":"components/","text":"Overview The brand reflects who we are and how we want our users to feel when they use our products.","title":"Overview"},{"location":"components/#overview","text":"The brand reflects who we are and how we want our users to feel when they use our products.","title":"Overview"},{"location":"components/buttons/","text":"A button triggers an event or action. They let users know what will happen next. Examples Code Usage","title":"Buttons"},{"location":"components/checkbox/","text":"A checkbox is an input control that allows a user to select one or more options from a number of choices. Examples Code Usage","title":"Checkbox"},{"location":"components/section-message/","text":"A section message is used to alert users to a particular section of the screen. Examples Appearance By default, all section message come with an icon and an area for content. A title and actions can also be added. Code Usage","title":"Section message"},{"location":"components/section-message/#appearance","text":"By default, all section message come with an icon and an area for content. A title and actions can also be added. Code Usage","title":"Appearance"},{"location":"components/text-area/","text":"A text area lets users enter long form text which spans over multiple lines. Examples Code Usage","title":"Text area"},{"location":"components/text-field/","text":"A text field is an input that allows a user to write or edit text. Examples Code Usage","title":"Text field"},{"location":"content/","text":"Overview Content guidance covers our voice and tone, and the mechanics of our grammar and style. We use clear, concise, and conversational language to craft the messages teams need to know, to get them to where they need to go","title":"Overview"},{"location":"content/#overview","text":"Content guidance covers our voice and tone, and the mechanics of our grammar and style. We use clear, concise, and conversational language to craft the messages teams need to know, to get them to where they need to go","title":"Overview"},{"location":"content/inclusive-language/","text":"Inclusive language","title":"Inclusive language"},{"location":"content/inclusive-language/#inclusive-language","text":"","title":"Inclusive language"},{"location":"content/language-and-grammar/","text":"Language and grammar Abbreviations Active voice Bold, Italic Gender Title and headings","title":"Language and grammar"},{"location":"content/language-and-grammar/#language-and-grammar","text":"","title":"Language and grammar"},{"location":"content/language-and-grammar/#abbreviations","text":"","title":"Abbreviations"},{"location":"content/language-and-grammar/#active-voice","text":"","title":"Active voice"},{"location":"content/language-and-grammar/#bold-italic","text":"","title":"Bold, Italic"},{"location":"content/language-and-grammar/#gender","text":"","title":"Gender"},{"location":"content/language-and-grammar/#title-and-headings","text":"","title":"Title and headings"},{"location":"content/messaging-guidelines/","text":"Messaging guidelines Error message Info message Success message Warning message Feature message","title":"Messaging guidelines"},{"location":"content/messaging-guidelines/#messaging-guidelines","text":"","title":"Messaging guidelines"},{"location":"content/messaging-guidelines/#error-message","text":"","title":"Error message"},{"location":"content/messaging-guidelines/#info-message","text":"","title":"Info message"},{"location":"content/messaging-guidelines/#success-message","text":"","title":"Success  message"},{"location":"content/messaging-guidelines/#warning-message","text":"","title":"Warning  message"},{"location":"content/messaging-guidelines/#feature-message","text":"","title":"Feature  message"},{"location":"content/vocabulary/","text":"Vocabulary","title":"Vocabulary"},{"location":"content/vocabulary/#vocabulary","text":"","title":"Vocabulary"},{"location":"content/voice-and-tone-principles/","text":"Voice and tone principles","title":"Voice and tone principles"},{"location":"content/voice-and-tone-principles/#voice-and-tone-principles","text":"","title":"Voice and tone principles"},{"location":"content/writing-style/","text":"Writing style","title":"Writing style"},{"location":"content/writing-style/#writing-style","text":"","title":"Writing style"},{"location":"data-visualization/","text":"Overview","title":"Overview"},{"location":"data-visualization/#overview","text":"","title":"Overview"},{"location":"data-visualization/axes-and-labels/","text":"Axes and labels","title":"Axes and labels"},{"location":"data-visualization/axes-and-labels/#axes-and-labels","text":"","title":"Axes and labels"},{"location":"data-visualization/chart-types/","text":"Chart types","title":"Chart types"},{"location":"data-visualization/chart-types/#chart-types","text":"","title":"Chart types"},{"location":"data-visualization/color-palettes/","text":"Color palettes","title":"Color palettes"},{"location":"data-visualization/color-palettes/#color-palettes","text":"","title":"Color palettes"},{"location":"data-visualization/dashboard/","text":"Dashboard","title":"Dashboard"},{"location":"data-visualization/dashboard/#dashboard","text":"","title":"Dashboard"},{"location":"developer-guide/","text":"Overview This guide contains instructions on developing features/fixes for WSO2 Identity Apps. Use this as a handbook for submitting PRs. Prerequisites Setting up Development Tools Setting up the Source Code Bootstrapping the project Install npm and Lerna modules Bootstrap and hoist common dependencies Building the project Configuration Guide Writing Code Ensuring Code Quality Formatting Ensuring performance Styling Forms Writing Tests Unit Tests Integration Tests Troubleshoot","title":"Overview"},{"location":"developer-guide/#overview","text":"This guide contains instructions on developing features/fixes for WSO2 Identity Apps. Use this as a handbook for submitting PRs. Prerequisites Setting up Development Tools Setting up the Source Code Bootstrapping the project Install npm and Lerna modules Bootstrap and hoist common dependencies Building the project Configuration Guide Writing Code Ensuring Code Quality Formatting Ensuring performance Styling Forms Writing Tests Unit Tests Integration Tests Troubleshoot","title":"Overview"},{"location":"developer-guide/bootstrapping-the-project/","text":"Usually, running the build command would automatically install all the dependencies. In-case you want to manually do this, execute the following commands accordingly. Install npm and Lerna modules Runs npm install & npx lerna bootstrap which will bootstrap all the Lerna modules. Use this mode for development. npm run bootstrap Bootstrap and hoist common dependencies This is the mode used in the production build. Learn more about Lerna hoisting here . npm run bootstrap:hoist","title":"Bootstrapping the project"},{"location":"developer-guide/bootstrapping-the-project/#install-npm-and-lerna-modules","text":"Runs npm install & npx lerna bootstrap which will bootstrap all the Lerna modules. Use this mode for development. npm run bootstrap","title":"Install npm and Lerna modules"},{"location":"developer-guide/bootstrapping-the-project/#bootstrap-and-hoist-common-dependencies","text":"This is the mode used in the production build. Learn more about Lerna hoisting here . npm run bootstrap:hoist","title":"Bootstrap and hoist common dependencies"},{"location":"developer-guide/building-the-project/","text":"We support the following set of build strategies. Building using Maven Run the following command from the root of the project (where the root pom.xml is located). # Hoists and boostraps the dependecies & builds the entire project including the JSP portals. mvn clean install Building using NPM Run the following command from the root of the project (where the root package.json is located). # Boostraps the dependecies & builds the node projects. npm run build:dev","title":"Building the project"},{"location":"developer-guide/building-the-project/#building-using-maven","text":"Run the following command from the root of the project (where the root pom.xml is located). # Hoists and boostraps the dependecies & builds the entire project including the JSP portals. mvn clean install","title":"Building using Maven"},{"location":"developer-guide/building-the-project/#building-using-npm","text":"Run the following command from the root of the project (where the root package.json is located). # Boostraps the dependecies & builds the node projects. npm run build:dev","title":"Building using NPM"},{"location":"developer-guide/configuration-guide/","text":"The portals i.e. Console & My Account are configurable using the deployment.toml when they are hosted inside the Identity Server. Read through our configurations guidelines to learn about the configuration process.","title":"Configuration guide"},{"location":"developer-guide/prerequisites/","text":"Before you can build and write code, make sure you have the following set of tools on your local environment: Git - Open source distributed version control system. For install instructions, refer this . Node.js - JavaScript runtime with node package manager ( npm ). Maven - Build automation tool for Java projects. * For Maven 3.8 and up, please check the Troubleshoot section . Java Development Kit 1.8 - Development environment for building applications using the Java programming language.","title":"Prerequisites"},{"location":"developer-guide/setting-up-development-tools/","text":"ESLint ESLint is a static code analysis tool for identifying problematic patterns found in JavaScript/Typescript code. Make sure you setup the supplementary plugins in your IDE of choice. Webstorm WebStorm shows warnings and errors reported by ESLint right in the editor, as you type. Install the plugin VS Code Integrates ESLint into VS Code. The extension uses the ESLint library installed in the opened workspace folder. Install the plugin","title":"Setting up development tools"},{"location":"developer-guide/setting-up-development-tools/#eslint","text":"ESLint is a static code analysis tool for identifying problematic patterns found in JavaScript/Typescript code. Make sure you setup the supplementary plugins in your IDE of choice.","title":"ESLint"},{"location":"developer-guide/setting-up-development-tools/#webstorm","text":"WebStorm shows warnings and errors reported by ESLint right in the editor, as you type. Install the plugin","title":"Webstorm"},{"location":"developer-guide/setting-up-development-tools/#vs-code","text":"Integrates ESLint into VS Code. The extension uses the ESLint library installed in the opened workspace folder. Install the plugin","title":"VS Code"},{"location":"developer-guide/setting-up-the-source-code/","text":"Fork the repository. Clone your fork to the local machine. Replace <github username> with your own username. git clone https://github.com/<github username>/identity-apps.git Set the original repo as the upstream remote. git remote add upstream https://github.com/wso2/identity-apps.git","title":"Setting up the source code"},{"location":"developer-guide/styling/","text":"Forms Always use the new @wso2is/form module when developing forms. Read the documentation here . Sectioned Form When styling the forms, avoid using any ad-hoc Headings, Dividers etc. If you wish to write a form with sub sections, use the FormSection component. It will add a divider and a Heading with a constant emphasis level. Usage <FormSection heading=\u201cPermissions\u201d> <Field.Input ariaLabel=\"scopes\" inputType=\"text\" name=\"scopes\" \u2026 /> <Field.Input ariaLabel=\"user data\" inputType=\"text\" name=\"userData\" \u2026 /> <FormSection> Output","title":"Styling"},{"location":"developer-guide/styling/#forms","text":"Always use the new @wso2is/form module when developing forms. Read the documentation here .","title":"Forms"},{"location":"developer-guide/styling/#sectioned-form","text":"When styling the forms, avoid using any ad-hoc Headings, Dividers etc. If you wish to write a form with sub sections, use the FormSection component. It will add a divider and a Heading with a constant emphasis level.","title":"Sectioned Form"},{"location":"developer-guide/styling/#usage","text":"<FormSection heading=\u201cPermissions\u201d> <Field.Input ariaLabel=\"scopes\" inputType=\"text\" name=\"scopes\" \u2026 /> <Field.Input ariaLabel=\"user data\" inputType=\"text\" name=\"userData\" \u2026 /> <FormSection>","title":"Usage"},{"location":"developer-guide/styling/#output","text":"","title":"Output"},{"location":"developer-guide/troubleshoot/","text":"Maven Build Failures If you face any out of memory build failures, make sure that you have set maven options to set MAVEN_OPTS=-Xmx384M For Maven v3.8 up, add below configuration to the ~/.m2/settings.xml (Create a new file if the file exist) <settings> <mirrors> <mirror> <id> wso2-nexus-public </id> <mirrorOf> external:http:* </mirrorOf> <url> http://maven.wso2.org/nexus/content/groups/wso2-public/ </url> <blocked> false </blocked> </mirror> <mirror> <id> wso2-nexus-release </id> <mirrorOf> external:http:* </mirrorOf> <url> http://maven.wso2.org/nexus/content/repositories/releases/ </url> <blocked> false </blocked> </mirror> <mirror> <id> wso2-nexus-snapshots </id> <mirrorOf> external:http:* </mirrorOf> <url> http://maven.wso2.org/nexus/content/repositories/snapshots/ </url> <blocked> false </blocked> </mirror> </mirrors> </settings>","title":"Troubleshoot"},{"location":"developer-guide/troubleshoot/#maven","text":"","title":"Maven"},{"location":"developer-guide/troubleshoot/#build-failures","text":"If you face any out of memory build failures, make sure that you have set maven options to set MAVEN_OPTS=-Xmx384M For Maven v3.8 up, add below configuration to the ~/.m2/settings.xml (Create a new file if the file exist) <settings> <mirrors> <mirror> <id> wso2-nexus-public </id> <mirrorOf> external:http:* </mirrorOf> <url> http://maven.wso2.org/nexus/content/groups/wso2-public/ </url> <blocked> false </blocked> </mirror> <mirror> <id> wso2-nexus-release </id> <mirrorOf> external:http:* </mirrorOf> <url> http://maven.wso2.org/nexus/content/repositories/releases/ </url> <blocked> false </blocked> </mirror> <mirror> <id> wso2-nexus-snapshots </id> <mirrorOf> external:http:* </mirrorOf> <url> http://maven.wso2.org/nexus/content/repositories/snapshots/ </url> <blocked> false </blocked> </mirror> </mirrors> </settings>","title":"Build Failures"},{"location":"developer-guide/writing-code/","text":"Ensuring Code Quality Make sure that you set up the required developer tools as mentioned here before starting off with the coding. ESLint We use [ESLint][eslint-official-site] as the primary code analysis tool and it's important that you adhere to the defined ruleset in the configuration. Setup the ESLint plugin corresponding to the IDE/Code editor you are using. For more information, follow the instructions here . Always keep an eye out for the inline warnings and errors given out by the plugin and also execute the following command before making a commit to make sure that you don't violate the rules. # Run this from the root. npm run lint:staged React Rules of Thumb Writing Components Conditional Rendering The return from an component should always be a ReactElement or null . Always be careful when doing [conditional rendering][react-conditional-rendering] with && operator. If the component returns undefined, React with break the rendering as of now. Do export const SignOnMethods : FunctionComponent < SignOnMethodsPropsInterface > = ( props : SignOnMethodsPropsInterface ) : ReactElement => { ... return ( someCondition ? < SignOnMethodsContent /> : null ); } Don't export const SignOnMethods : FunctionComponent < SignOnMethodsPropsInterface > = ( props : SignOnMethodsPropsInterface ) : ReactElement => { ... return someCondition && < SignOnMethodsContent /> ; } Formatting We have already added few ESLint rules to ensure consistent formatting across the entire codebase. Please make sure you adhere to the specified rules and also follow the following set of common formatting practices while developing components. Ternary Expressions Typescript allows operands of ternary expressions to be separated by newlines, which can improve the readability of your program. Do Single Line foo > bar ? value1 : value1 Multiline foo > bar ? value1 : value1 Don't foo > bar ? value1 : value1 Ensuring performance We care a lot about maintaining the performance of our applications. Hence, it is your duty to make sure that the code you write follows the standards and does not diminish the existing performance levels. In-order to ensure this, please follow the following steps while making your contributions. Use code splitting Webpack and React supports code splitting out of the box. Try to always leverage these features to reduce bundle size and performance. Read more about Webpack Code Splitting here . Read more about React Code Splitting here . Take advantage of tree shaking Webpack's treeshaking is a really awesome feature to get rid of dead code. Always try to take advantage of that. Do import get from \"lodash-es\" ; Don't import * as _ from \"lodash-es\" ; Don't write redundant code Unnecessary code will bulk up the bundle without you even realizing. Always try to avoid scenarios like the following. Redundant optional chain Don't if ( user ? . email && user ? . email ? . home ) { ... } When the above block is transpiled, it is converted to the following. if (( user === null || user === void 0 ? void 0 : user . email ) && (( _a = user === null || user === void 0 ? void 0 : user . email ) === null || _a === void 0 ? void 0 : _a . home )) { } Notice that the first null check is redundant. It can be re-written as follows. Do if ( user ? . email ? . home ) { ... } Following is the transpiled version of the above code block. The footprint is significantly less. if (( _a = user === null || user === void 0 ? void 0 : user . email ) === null || _a === void 0 ? void 0 : _a . home ) { } Always remember, more characters means more bytes. Carefully adding new dependencies Dependencies carry a heavy wait and contribute in a significant amount for the overall bundle size. So, when adding a new library to the project try to answer the following questions. Q1. Is the library absolutely required? In some cases, you will be able to manually write the code rather than using a library. But keep in mind not to re-invent the wheel as well. Q2. Is the library actively maintained? Go to the NPM registry and GitHub repository of the prospective library and check for stats like downloads, stars, last published dates, issues etc. This will give you an understanding on the state of the library. Never add a dependency that is not actively maintained. Q3. Have you considered other libraries? Do a benchmark and test other related libraries. Q4. What is the size of the library? You can easily check the size of the library by using an online tool like Bundlephobia . Q5. What are the dependencies used inside the library? Some library developers include relatively large dependencies like lodash , moment etc. in their libraries as dependencies. Adding these will result in increase bundle sizes. Check in the package.json for the dependencies used inside the library. Q6. What is the footprint introduced by the newly added library? We have added a script to analyze the bundle sizes of our react applications using Webpack Bundle Analyzer Plugin . Use the following command to examine the footprint introduced by the prospective library. Analyze for Console The analyzer will open in http://localhost:8889 npx lerna run build:analyze --scope @wso2is/console Analyze for My Account The analyzer will open in http://localhost:8888 npx lerna run build:analyze --scope @wso2is/myaccount Once you execute the above command, the resulting view will look something like the following. Optimize static assets When adding new assets, always check the existing once in the theme and only proceed if the desired asset is not available. Adding Images When adding images, always try to add SVGs which are optimized for web.","title":"Writing code"},{"location":"developer-guide/writing-code/#ensuring-code-quality","text":"Make sure that you set up the required developer tools as mentioned here before starting off with the coding.","title":"Ensuring Code Quality"},{"location":"developer-guide/writing-code/#eslint","text":"We use [ESLint][eslint-official-site] as the primary code analysis tool and it's important that you adhere to the defined ruleset in the configuration. Setup the ESLint plugin corresponding to the IDE/Code editor you are using. For more information, follow the instructions here . Always keep an eye out for the inline warnings and errors given out by the plugin and also execute the following command before making a commit to make sure that you don't violate the rules. # Run this from the root. npm run lint:staged","title":"ESLint"},{"location":"developer-guide/writing-code/#react-rules-of-thumb","text":"","title":"React Rules of Thumb"},{"location":"developer-guide/writing-code/#writing-components","text":"","title":"Writing Components"},{"location":"developer-guide/writing-code/#conditional-rendering","text":"The return from an component should always be a ReactElement or null . Always be careful when doing [conditional rendering][react-conditional-rendering] with && operator. If the component returns undefined, React with break the rendering as of now. Do export const SignOnMethods : FunctionComponent < SignOnMethodsPropsInterface > = ( props : SignOnMethodsPropsInterface ) : ReactElement => { ... return ( someCondition ? < SignOnMethodsContent /> : null ); } Don't export const SignOnMethods : FunctionComponent < SignOnMethodsPropsInterface > = ( props : SignOnMethodsPropsInterface ) : ReactElement => { ... return someCondition && < SignOnMethodsContent /> ; }","title":"Conditional Rendering"},{"location":"developer-guide/writing-code/#formatting","text":"We have already added few ESLint rules to ensure consistent formatting across the entire codebase. Please make sure you adhere to the specified rules and also follow the following set of common formatting practices while developing components.","title":"Formatting"},{"location":"developer-guide/writing-code/#ternary-expressions","text":"Typescript allows operands of ternary expressions to be separated by newlines, which can improve the readability of your program. Do Single Line foo > bar ? value1 : value1 Multiline foo > bar ? value1 : value1 Don't foo > bar ? value1 : value1","title":"Ternary Expressions"},{"location":"developer-guide/writing-code/#ensuring-performance","text":"We care a lot about maintaining the performance of our applications. Hence, it is your duty to make sure that the code you write follows the standards and does not diminish the existing performance levels. In-order to ensure this, please follow the following steps while making your contributions.","title":"Ensuring performance"},{"location":"developer-guide/writing-code/#use-code-splitting","text":"Webpack and React supports code splitting out of the box. Try to always leverage these features to reduce bundle size and performance. Read more about Webpack Code Splitting here . Read more about React Code Splitting here .","title":"Use code splitting"},{"location":"developer-guide/writing-code/#take-advantage-of-tree-shaking","text":"Webpack's treeshaking is a really awesome feature to get rid of dead code. Always try to take advantage of that. Do import get from \"lodash-es\" ; Don't import * as _ from \"lodash-es\" ;","title":"Take advantage of tree shaking"},{"location":"developer-guide/writing-code/#dont-write-redundant-code","text":"Unnecessary code will bulk up the bundle without you even realizing. Always try to avoid scenarios like the following.","title":"Don't write redundant code"},{"location":"developer-guide/writing-code/#redundant-optional-chain","text":"Don't if ( user ? . email && user ? . email ? . home ) { ... } When the above block is transpiled, it is converted to the following. if (( user === null || user === void 0 ? void 0 : user . email ) && (( _a = user === null || user === void 0 ? void 0 : user . email ) === null || _a === void 0 ? void 0 : _a . home )) { } Notice that the first null check is redundant. It can be re-written as follows. Do if ( user ? . email ? . home ) { ... } Following is the transpiled version of the above code block. The footprint is significantly less. if (( _a = user === null || user === void 0 ? void 0 : user . email ) === null || _a === void 0 ? void 0 : _a . home ) { } Always remember, more characters means more bytes.","title":"Redundant optional chain"},{"location":"developer-guide/writing-code/#carefully-adding-new-dependencies","text":"Dependencies carry a heavy wait and contribute in a significant amount for the overall bundle size. So, when adding a new library to the project try to answer the following questions. Q1. Is the library absolutely required? In some cases, you will be able to manually write the code rather than using a library. But keep in mind not to re-invent the wheel as well. Q2. Is the library actively maintained? Go to the NPM registry and GitHub repository of the prospective library and check for stats like downloads, stars, last published dates, issues etc. This will give you an understanding on the state of the library. Never add a dependency that is not actively maintained. Q3. Have you considered other libraries? Do a benchmark and test other related libraries. Q4. What is the size of the library? You can easily check the size of the library by using an online tool like Bundlephobia . Q5. What are the dependencies used inside the library? Some library developers include relatively large dependencies like lodash , moment etc. in their libraries as dependencies. Adding these will result in increase bundle sizes. Check in the package.json for the dependencies used inside the library. Q6. What is the footprint introduced by the newly added library? We have added a script to analyze the bundle sizes of our react applications using Webpack Bundle Analyzer Plugin . Use the following command to examine the footprint introduced by the prospective library.","title":"Carefully adding new dependencies"},{"location":"developer-guide/writing-code/#analyze-for-console","text":"The analyzer will open in http://localhost:8889 npx lerna run build:analyze --scope @wso2is/console","title":"Analyze for Console"},{"location":"developer-guide/writing-code/#analyze-for-my-account","text":"The analyzer will open in http://localhost:8888 npx lerna run build:analyze --scope @wso2is/myaccount Once you execute the above command, the resulting view will look something like the following.","title":"Analyze for My Account"},{"location":"developer-guide/writing-code/#optimize-static-assets","text":"When adding new assets, always check the existing once in the theme and only proceed if the desired asset is not available.","title":"Optimize static assets"},{"location":"developer-guide/writing-code/#adding-images","text":"When adding images, always try to add SVGs which are optimized for web.","title":"Adding Images"},{"location":"developer-guide/writing-tests/","text":"Unit Tests Product Unit tests have been implemented using Jest along with React Testing Library . Make sure to write unit tests when you are working on new or existing components. Writing tests. Writing unit tests for every component that you develop is mandatory. Take a look at the following example test case where we test if the component that we are writing mounts and renders as expected. import React from \"react\"; import \"@testing-library/jest-dom/extend-expect\"; import { render } from \"test-utils\"; import { ApplicationList } from \"../../../components/applications\"; describe(\"Test if the Application List is working as expected\", () => { it(\"<ApplicationList /> renders without exploding\", () => { const component = render(<ApplicationList />); expect(component.getByTestId(\"application-list\")).toBeInTheDocument(); }); }); Note that we use a custom render function here rather than from the @testing-library/react module. The reason for this is that we need to wrap our components with providers like Redux etc. And doing this in every test case is a tedious task. So we have written a custom renderer following the guide in [official documentation][react-testing-library-custom-renderer]. Snapshot Testing Snapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly. A typical snapshot test case renders a UI component, takes a snapshot, then compares it to a reference snapshot file stored alongside the test. The test will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be updated to the new version of the UI component. it(\"<ApplicationList /> matches snapshot\", () => { const component = render(<ApplicationList />); expect(component.container).toMatchSnapshot(); }); For further reference, checkout the official documentation of [React Testing Library][react-testing-library]. Running the test suite. Following are few of the useful commands that you can use to run the existing unit tests for modules. Run Tests for all modules # From project root. npm run test Run Tests for all modules in watch mode # From project root. npm run test:watch Run Tests for individual component Using Lerna # From anywhere inside the project. npx lerna run test --scope @wso2is/forms From the project root. # Run tests for modules. npm run test:unit:modules # Run tests for apps. npm run test:unit:apps # Run tests for specific module. (Replace <MODULE_NAME> with something like `@wso2is/core` or `@wso2is/myaccount`) npm run test:unit:<MODULE_NAME> From inside respective component. # From inside component ex: apps/console. Use `npm run test:watch for watch mode. npm run test Code Coverage Generate coverage report # From the root of the project. npm run test:unit:coverage Integration Tests Product integration tests have been written using Cypress Testing Framework and you can run the test suites using the following command. Headless mode npm run test:integration Interactive mode npm run test:integration:interactive Only Smoke Tests npm run test:integration:smoke For more information regarding the test module, checkout the README in the tests module.","title":"Writing tests"},{"location":"developer-guide/writing-tests/#unit-tests","text":"Product Unit tests have been implemented using Jest along with React Testing Library . Make sure to write unit tests when you are working on new or existing components.","title":"Unit Tests"},{"location":"developer-guide/writing-tests/#writing-tests","text":"Writing unit tests for every component that you develop is mandatory. Take a look at the following example test case where we test if the component that we are writing mounts and renders as expected. import React from \"react\"; import \"@testing-library/jest-dom/extend-expect\"; import { render } from \"test-utils\"; import { ApplicationList } from \"../../../components/applications\"; describe(\"Test if the Application List is working as expected\", () => { it(\"<ApplicationList /> renders without exploding\", () => { const component = render(<ApplicationList />); expect(component.getByTestId(\"application-list\")).toBeInTheDocument(); }); }); Note that we use a custom render function here rather than from the @testing-library/react module. The reason for this is that we need to wrap our components with providers like Redux etc. And doing this in every test case is a tedious task. So we have written a custom renderer following the guide in [official documentation][react-testing-library-custom-renderer].","title":"Writing tests."},{"location":"developer-guide/writing-tests/#snapshot-testing","text":"Snapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly. A typical snapshot test case renders a UI component, takes a snapshot, then compares it to a reference snapshot file stored alongside the test. The test will fail if the two snapshots do not match: either the change is unexpected, or the reference snapshot needs to be updated to the new version of the UI component. it(\"<ApplicationList /> matches snapshot\", () => { const component = render(<ApplicationList />); expect(component.container).toMatchSnapshot(); }); For further reference, checkout the official documentation of [React Testing Library][react-testing-library].","title":"Snapshot Testing"},{"location":"developer-guide/writing-tests/#running-the-test-suite","text":"Following are few of the useful commands that you can use to run the existing unit tests for modules. Run Tests for all modules # From project root. npm run test Run Tests for all modules in watch mode # From project root. npm run test:watch Run Tests for individual component Using Lerna # From anywhere inside the project. npx lerna run test --scope @wso2is/forms From the project root. # Run tests for modules. npm run test:unit:modules # Run tests for apps. npm run test:unit:apps # Run tests for specific module. (Replace <MODULE_NAME> with something like `@wso2is/core` or `@wso2is/myaccount`) npm run test:unit:<MODULE_NAME> From inside respective component. # From inside component ex: apps/console. Use `npm run test:watch for watch mode. npm run test","title":"Running the test suite."},{"location":"developer-guide/writing-tests/#code-coverage","text":"Generate coverage report # From the root of the project. npm run test:unit:coverage","title":"Code Coverage"},{"location":"developer-guide/writing-tests/#integration-tests","text":"Product integration tests have been written using Cypress Testing Framework and you can run the test suites using the following command.","title":"Integration Tests"},{"location":"developer-guide/writing-tests/#headless-mode","text":"npm run test:integration","title":"Headless mode"},{"location":"developer-guide/writing-tests/#interactive-mode","text":"npm run test:integration:interactive","title":"Interactive mode"},{"location":"developer-guide/writing-tests/#only-smoke-tests","text":"npm run test:integration:smoke For more information regarding the test module, checkout the README in the tests module.","title":"Only Smoke Tests"},{"location":"foundation/","text":"Overview Foundations are the visual elements needed to create engaging end-to-end user experiences. This includes guidance on iconography, typography, layout, and structure.","title":"Overview"},{"location":"foundation/#overview","text":"Foundations are the visual elements needed to create engaging end-to-end user experiences. This includes guidance on iconography, typography, layout, and structure.","title":"Overview"},{"location":"foundation/accessibility/","text":"Accessibility","title":"Accessibility"},{"location":"foundation/accessibility/#accessibility","text":"","title":"Accessibility"},{"location":"foundation/colors/","text":"Colors Color Palette Table Type Color HEX Code Primary Orange #FF7300 Secondary Yellow #FFC808 Cool Grey #465867 White #FFFFFF Black #000000 Background Winter Grey #D7E2DE Dark Grey #212A32 Status Red-Error #FF0F0F Green-Success #1EBC30 Yellow-Warning #FFA500 Blue-Info #0095FF","title":"Colors"},{"location":"foundation/colors/#colors","text":"","title":"Colors"},{"location":"foundation/colors/#color-palette","text":"","title":"Color Palette"},{"location":"foundation/colors/#table","text":"Type Color HEX Code Primary Orange #FF7300 Secondary Yellow #FFC808 Cool Grey #465867 White #FFFFFF Black #000000 Background Winter Grey #D7E2DE Dark Grey #212A32 Status Red-Error #FF0F0F Green-Success #1EBC30 Yellow-Warning #FFA500 Blue-Info #0095FF","title":"Table"},{"location":"foundation/grid/","text":"Grid","title":"Grid"},{"location":"foundation/grid/#grid","text":"","title":"Grid"},{"location":"foundation/iconography/","text":"Iconography Icons The appearance of icons changes depending on the current state. This visual indicator makes it easier for people to interpret the message. Resting Hover Selected Active Focus Table Icon Name Icon User Info user-info Download User Role user-role Download","title":"Iconography"},{"location":"foundation/iconography/#iconography","text":"","title":"Iconography"},{"location":"foundation/iconography/#icons","text":"The appearance of icons changes depending on the current state. This visual indicator makes it easier for people to interpret the message. Resting Hover Selected Active Focus","title":"Icons"},{"location":"foundation/iconography/#table","text":"Icon Name Icon User Info user-info Download User Role user-role Download","title":"Table"},{"location":"foundation/illustrations/","text":"Illustrations","title":"Illustrations"},{"location":"foundation/illustrations/#illustrations","text":"","title":"Illustrations"},{"location":"foundation/interaction-states/","text":"Interaction states","title":"Interaction states"},{"location":"foundation/interaction-states/#interaction-states","text":"","title":"Interaction states"},{"location":"foundation/logos/","text":"Logos","title":"Logos"},{"location":"foundation/logos/#logos","text":"","title":"Logos"},{"location":"foundation/spacing/","text":"Spacing Spacing Spacing Top Right Bottom Left Micro\u20224px pt-micro pr-micro pb-micro pl-micro Tiny\u20228px pt-tiny pr-tiny pb-tiny pl-tiny Small\u202216px pt-small pr-small pb-small pl-small Base\u202224px pt-base pr-base pb-base pl-base Large\u202248px pt-large pr-large pb-large pl-large x-large\u202264px pt-x-large pr-x-large pb-x-large pl-x-large","title":"Spacing"},{"location":"foundation/spacing/#spacing","text":"","title":"Spacing"},{"location":"foundation/spacing/#spacing_1","text":"Spacing Top Right Bottom Left Micro\u20224px pt-micro pr-micro pb-micro pl-micro Tiny\u20228px pt-tiny pr-tiny pb-tiny pl-tiny Small\u202216px pt-small pr-small pb-small pl-small Base\u202224px pt-base pr-base pb-base pl-base Large\u202248px pt-large pr-large pb-large pl-large x-large\u202264px pt-x-large pr-x-large pb-x-large pl-x-large","title":"Spacing"},{"location":"foundation/typography/","text":"Typography Typography Type Font Size (Minor-Third Scale) Font Weight Line Height (Font size x 1.4) H1 2.488rem/39.81px 500 55.734 H2 2.074rem/33.18px 500 46.452 H3 1.728rem/27.65px 500 38.71 H4 1.44rem/23.04px 500 32.256 h5 1.2rem/19.20px 500 26.88 H6 1rem/16.00px 500 22.4 Paragraph(Primary) 1rem/16.00px 400 22.4 Paragraph(Secondary) 0.875rem/14.00px 400 19.6 Label, Message 0.833rem/13.33px 400 18.662","title":"Typography"},{"location":"foundation/typography/#typography","text":"","title":"Typography"},{"location":"foundation/typography/#typography_1","text":"Type Font Size (Minor-Third Scale) Font Weight Line Height (Font size x 1.4) H1 2.488rem/39.81px 500 55.734 H2 2.074rem/33.18px 500 46.452 H3 1.728rem/27.65px 500 38.71 H4 1.44rem/23.04px 500 32.256 h5 1.2rem/19.20px 500 26.88 H6 1rem/16.00px 500 22.4 Paragraph(Primary) 1rem/16.00px 400 22.4 Paragraph(Secondary) 0.875rem/14.00px 400 19.6 Label, Message 0.833rem/13.33px 400 18.662","title":"Typography"},{"location":"patterns/","text":"Overview Patterns are reusable combinations of components that solve common user problems. These best practice solutions help users achieve their goals and help ensure consistency across experiences.","title":"Overview"},{"location":"patterns/#overview","text":"Patterns are reusable combinations of components that solve common user problems. These best practice solutions help users achieve their goals and help ensure consistency across experiences.","title":"Overview"},{"location":"patterns/button-usage/","text":"Button types","title":"Button usage"},{"location":"patterns/button-usage/#button-types","text":"","title":"Button types"},{"location":"patterns/forms/","text":"Forms When to use Forms are incredibly common in user interfaces and their design and usage continues to evolve as input methods get smarter and more and more people use mobile and tablet devices. You might design a form for a user to Sign up for / log into an account Register application Add users Add user groups Configure settings, (e.g. application settings) Take a survey Provide feedback Formatting All forms are comprised of six elements: Labels: Inform users what the corresponding input fields mean. Input fields: Enable users to provide information. Information can be entered through a variety of different input fields ranging from text fields, checkboxes, and many other types. Helper text: Provides assistance on how to fill out a field. Helper text is optional. Placeholder text: Hints at what goes into a field. Placeholder text is optional. Actions: Allow users to submit a form. Validation: Ensures the data submitted by the user conforms to acceptable parameters. Button placement Modal Non-Modal Align single buttons or Secondary / Primary button groups to the left. Buttons should align with the form controls regardless of the user\u2018s window width. Multi-Step forms Content Form logic Single selection Radio buttons are used when there is a list of two or more options that are mutually exclusive and the user must select exactly one choice. In other words, clicking a non-selected radio button will deselect whatever other button was previously selected in the list. 2-5 Options Use Radio buttons 5-15 Options Use a Listbox More than 15 Options If the user knows what they are looking for, use a Listbox with a form field and let them type and filter. Use a Dropdown if the space is limited. (e.g., Select Country, City) Multi-selection Checkboxes are used when there are lists of options and the user may select any number of choices, including zero, one, or several. In other words, each checkbox is independent of all other checkboxes in the list, so checking one box doesn\u2019t uncheck the others. A stand-alone checkbox or a toggle can be used for a single option that the user can turn on or off. 2-5 options Use Checkboxes Image caption 5-15 options Use a Listbox Image caption More than 15 options If the user knows what they are looking for, use a Listbox with a form field and let them type and filter. Use a Dropdown if the space is limited. Image caption Single selection Select elements are used for fields in which a single selection is required and there are a large number of possible options. Single checkbox Use a single check box if you have to save the action by clicking a button Toggle Use a toggle if the action can save itself (Without clicking the button) Validation and errors Form validation We recommend validating the users\u2019 data before form submission. Use visual cues to guide the user as to where the problem lies within the form. This will help to easily identify the elements that need to be corrected. The validation should appear when the user has clicked away from the text field. Once the user corrects the errors within the text field, the validation should disappear once the data is rendered as valid. The validation label below the field should be as informative as possible when describing the issue with the users data. For example, if password limitations require 16 characters, but the user inputs a password with only six characters, the text should read something like, \u201cPassword must be at least 16 characters.\u201d Optional versus required fields Add red \"*\" to the end of the labels for Required fields except for the Login form. All other fields are optional","title":"Forms"},{"location":"patterns/forms/#forms","text":"","title":"Forms"},{"location":"patterns/forms/#when-to-use","text":"Forms are incredibly common in user interfaces and their design and usage continues to evolve as input methods get smarter and more and more people use mobile and tablet devices. You might design a form for a user to Sign up for / log into an account Register application Add users Add user groups Configure settings, (e.g. application settings) Take a survey Provide feedback","title":"When to use"},{"location":"patterns/forms/#formatting","text":"All forms are comprised of six elements: Labels: Inform users what the corresponding input fields mean. Input fields: Enable users to provide information. Information can be entered through a variety of different input fields ranging from text fields, checkboxes, and many other types. Helper text: Provides assistance on how to fill out a field. Helper text is optional. Placeholder text: Hints at what goes into a field. Placeholder text is optional. Actions: Allow users to submit a form. Validation: Ensures the data submitted by the user conforms to acceptable parameters.","title":"Formatting"},{"location":"patterns/forms/#button-placement","text":"","title":"Button placement"},{"location":"patterns/forms/#modal","text":"","title":"Modal"},{"location":"patterns/forms/#non-modal","text":"Align single buttons or Secondary / Primary button groups to the left. Buttons should align with the form controls regardless of the user\u2018s window width.","title":"Non-Modal"},{"location":"patterns/forms/#multi-step-forms","text":"","title":"Multi-Step forms"},{"location":"patterns/forms/#content","text":"","title":"Content"},{"location":"patterns/forms/#form-logic","text":"","title":"Form logic"},{"location":"patterns/forms/#single-selection","text":"Radio buttons are used when there is a list of two or more options that are mutually exclusive and the user must select exactly one choice. In other words, clicking a non-selected radio button will deselect whatever other button was previously selected in the list. 2-5 Options Use Radio buttons 5-15 Options Use a Listbox More than 15 Options If the user knows what they are looking for, use a Listbox with a form field and let them type and filter. Use a Dropdown if the space is limited. (e.g., Select Country, City)","title":"Single selection"},{"location":"patterns/forms/#multi-selection","text":"Checkboxes are used when there are lists of options and the user may select any number of choices, including zero, one, or several. In other words, each checkbox is independent of all other checkboxes in the list, so checking one box doesn\u2019t uncheck the others. A stand-alone checkbox or a toggle can be used for a single option that the user can turn on or off. 2-5 options Use Checkboxes Image caption 5-15 options Use a Listbox Image caption More than 15 options If the user knows what they are looking for, use a Listbox with a form field and let them type and filter. Use a Dropdown if the space is limited. Image caption","title":"Multi-selection"},{"location":"patterns/forms/#single-selection_1","text":"Select elements are used for fields in which a single selection is required and there are a large number of possible options. Single checkbox Use a single check box if you have to save the action by clicking a button Toggle Use a toggle if the action can save itself (Without clicking the button)","title":"Single selection"},{"location":"patterns/forms/#validation-and-errors","text":"","title":"Validation and errors"},{"location":"patterns/forms/#form-validation","text":"We recommend validating the users\u2019 data before form submission. Use visual cues to guide the user as to where the problem lies within the form. This will help to easily identify the elements that need to be corrected. The validation should appear when the user has clicked away from the text field. Once the user corrects the errors within the text field, the validation should disappear once the data is rendered as valid. The validation label below the field should be as informative as possible when describing the issue with the users data. For example, if password limitations require 16 characters, but the user inputs a password with only six characters, the text should read something like, \u201cPassword must be at least 16 characters.\u201d","title":"Form validation"},{"location":"patterns/forms/#optional-versus-required-fields","text":"Add red \"*\" to the end of the labels for Required fields except for the Login form. All other fields are optional","title":"Optional versus required fields"},{"location":"patterns/messages/","text":"Messages Use messages to communicate conditions, indicate an event, or show responses to user actions. Message types Banners Banners appear at the top of the screen and shift the content below it. They should only be used for critical system-level messaging (warnings and errors) about loss of data or functionality. Learn more about banners. Info A banner may be formatted to display information Flags Flags are used for confirmations, alerts, and acknowledgments that require minimal user interaction. These event-driven messages appear by overlaying content at the bottom left of the screen, emerging from the navigation sidebar. Learn more about flags. Section messages Section messages are used to alert the user of something that has happened in a specific section of the screen. They appear above the affected area (for example, Issue experience in Jira). Learn more about section messages. Info A message may be formatted to display information Warning A message may be formatted to display warning messages Positive / Success A message may be formatted to display a positive message Negative / Error A message may be formatted to display a negative message Colors Message types are assigned appropriate colors and icons to help indicate content and urgency. The available message types are confirmation, warning, error, and information. Setting the right color and icon for a message ensures people understand the nature of the message at a glance, and that they take appropriate action. Confirmation: Provides a positive response to user actions. Warning: Used to help users avoid error situations. Consists of a description of potential errors. It should provide a recommended next step, and an option to be reminded at a later date. Error: Shown when something goes wrong, or when the user is denied access. This should also provide recommended next steps, or a path forward. Information: Conveys information to help the user understand minor contextual or state changes. These are typically not in response to a user action.","title":"Messages"},{"location":"patterns/messages/#messages","text":"Use messages to communicate conditions, indicate an event, or show responses to user actions.","title":"Messages"},{"location":"patterns/messages/#message-types","text":"","title":"Message types"},{"location":"patterns/messages/#banners","text":"Banners appear at the top of the screen and shift the content below it. They should only be used for critical system-level messaging (warnings and errors) about loss of data or functionality. Learn more about banners.","title":"Banners"},{"location":"patterns/messages/#info","text":"A banner may be formatted to display information","title":"Info"},{"location":"patterns/messages/#flags","text":"Flags are used for confirmations, alerts, and acknowledgments that require minimal user interaction. These event-driven messages appear by overlaying content at the bottom left of the screen, emerging from the navigation sidebar. Learn more about flags.","title":"Flags"},{"location":"patterns/messages/#section-messages","text":"Section messages are used to alert the user of something that has happened in a specific section of the screen. They appear above the affected area (for example, Issue experience in Jira). Learn more about section messages.","title":"Section messages"},{"location":"patterns/messages/#info_1","text":"A message may be formatted to display information","title":"Info"},{"location":"patterns/messages/#warning","text":"A message may be formatted to display warning messages","title":"Warning"},{"location":"patterns/messages/#positive-success","text":"A message may be formatted to display a positive message","title":"Positive / Success"},{"location":"patterns/messages/#negative-error","text":"A message may be formatted to display a negative message","title":"Negative / Error"},{"location":"patterns/messages/#colors","text":"Message types are assigned appropriate colors and icons to help indicate content and urgency. The available message types are confirmation, warning, error, and information. Setting the right color and icon for a message ensures people understand the nature of the message at a glance, and that they take appropriate action. Confirmation: Provides a positive response to user actions. Warning: Used to help users avoid error situations. Consists of a description of potential errors. It should provide a recommended next step, and an option to be reminded at a later date. Error: Shown when something goes wrong, or when the user is denied access. This should also provide recommended next steps, or a path forward. Information: Conveys information to help the user understand minor contextual or state changes. These are typically not in response to a user action.","title":"Colors"},{"location":"patterns/navigation/","text":"Navigation","title":"Navigation"},{"location":"patterns/navigation/#navigation","text":"","title":"Navigation"},{"location":"patterns/page-header/","text":"Page header","title":"Page header"},{"location":"patterns/page-header/#page-header","text":"","title":"Page header"},{"location":"patterns/tables/","text":"Tables","title":"Tables"},{"location":"patterns/tables/#tables","text":"","title":"Tables"},{"location":"photography/","text":"Overview When choosing or creating an Asgardeo image, certain criteria should be considered.","title":"Overview"},{"location":"photography/#overview","text":"When choosing or creating an Asgardeo image, certain criteria should be considered.","title":"Overview"},{"location":"photography/aspect-ratio/","text":"Aspect ratio","title":"Aspect ratio"},{"location":"photography/aspect-ratio/#aspect-ratio","text":"","title":"Aspect ratio"},{"location":"photography/cliches-metaphors-and-see-say/","text":"Clich\u00e9s, metaphors & see-say","title":"Clich\u00e9s, metaphors & see-say"},{"location":"photography/cliches-metaphors-and-see-say/#cliches-metaphors-see-say","text":"","title":"Clich\u00e9s, metaphors &amp; see-say"},{"location":"photography/composition/","text":"Composition Framing Focal points","title":"Composition"},{"location":"photography/composition/#composition","text":"","title":"Composition"},{"location":"photography/composition/#framing","text":"","title":"Framing"},{"location":"photography/composition/#focal-points","text":"","title":"Focal points"},{"location":"photography/depth-of-field/","text":"Depth-of-field","title":"Depth-of-field"},{"location":"photography/depth-of-field/#depth-of-field","text":"","title":"Depth-of-field"},{"location":"photography/effects-and-filters/","text":"Effects and filters","title":"Effects and filters"},{"location":"photography/effects-and-filters/#effects-and-filters","text":"","title":"Effects and filters"},{"location":"photography/lighting/","text":"Lighting","title":"Lighting"},{"location":"photography/lighting/#lighting","text":"","title":"Lighting"},{"location":"photography/perspective/","text":"Perspective Eye-level Aerial","title":"Perspective"},{"location":"photography/perspective/#perspective","text":"","title":"Perspective"},{"location":"photography/perspective/#eye-level","text":"","title":"Eye-level"},{"location":"photography/perspective/#aerial","text":"","title":"Aerial"},{"location":"resources/","text":"Overview A collection of tools, kits, plugins, and guides to help simplify the creation process for our users.","title":"Overview"},{"location":"resources/#overview","text":"A collection of tools, kits, plugins, and guides to help simplify the creation process for our users.","title":"Overview"},{"location":"resources/adobe-xd-library/","text":"Adobe XD library","title":"Adobe XD library"},{"location":"resources/adobe-xd-library/#adobe-xd-library","text":"","title":"Adobe XD library"},{"location":"resources/banner-templates/","text":"Banner templates","title":"Banner templates"},{"location":"resources/banner-templates/#banner-templates","text":"","title":"Banner templates"},{"location":"resources/color-pallets/","text":"Color pallets","title":"Color pallets"},{"location":"resources/color-pallets/#color-pallets","text":"","title":"Color pallets"},{"location":"resources/figma-library/","text":"Figma library","title":"Figma library"},{"location":"resources/figma-library/#figma-library","text":"","title":"Figma library"},{"location":"resources/logos/","text":"Logos","title":"Logos"},{"location":"resources/logos/#logos","text":"","title":"Logos"},{"location":"resources/presentation-kit/","text":"Presentation kit","title":"Presentation kit"},{"location":"resources/presentation-kit/#presentation-kit","text":"","title":"Presentation kit"}]}